// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    // Select the A register's input and set its value
    Mux16(a=instruction, b=AluInternalOut, sel=instruction[15], out=instructionMuxOutM);
    Not(in=instruction[15], out=notAInstruction);
    Or(a=notAInstruction, b=instruction[5], out=loadA);

    ARegister(in=instructionMuxOutM, load=loadA, out=registerA, out[0..14]=addressM, out=ARegisterPC);

    // Set D register value
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=AluInternalOut, load=loadD, out=registerD);

    // Select ALU's second input
    Mux16(a=registerA, b=inM, sel=instruction[12], out=registerAMuxInM);

    ALU(x=registerD, y=registerAMuxInM, 
        zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], 
        out=outM, out=AluInternalOut, zr=AluOutIsZero, ng=AluOutIsNegative);

    //Write to memory
    And(a=instruction[15], b=instruction[3], out=writeM);


    //JGT
    Not(in=AluOutIsZero, out=notZero);
    Not(in=AluOutIsNegative, out=notNegative);
    And(a=notZero, b=notNegative, out=JGT);
    //JGE
    Or(a=AluOutIsZero, b=JGT, out=JGE);
    //JNE
    Not(in=AluOutIsZero, out=JNE);
    //JLE
    Or(a=AluOutIsNegative, b=AluOutIsZero, out=JLE);

    Mux(a=false, b=JGT, sel=instruction[0], out=temp1);
    Mux(a=AluOutIsZero, b=JGE, sel=instruction[0], out=temp2);
    Mux(a=AluOutIsNegative, b=JNE, sel=instruction[0], out=temp3);
    Mux(a=JLE, b=true, sel=instruction[0], out=temp4);

    Mux(a=temp1, b=temp2, sel=instruction[1], out=temp5);
    Mux(a=temp3, b=temp4, sel=instruction[1], out=temp6);

    Mux(a=temp5, b=temp6, sel=instruction[2], out=jmp);
    And(a=jmp, b=instruction[15], out=loadPC);

    PC(in=ARegisterPC, load=loadPC, inc=true, reset=reset, out[0..14]=pc);

}
